# -*- coding: utf-8 -*-
"""Chap4-Labs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8E_lHSW3TT3gxAP9XIp1mHw3tEsZWr2
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('https://raw.githubusercontent.com/mscaudill/IntroStatLearn/master/data/Smarket.csv')
df.head()

df.drop(columns=df.columns[0], inplace=True)
df.head()

corr = df.corr()
sns.heatmap(corr, cmap = 'YlGnBu', annot= True)

sns.pairplot(df)

df.isnull().mean()

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
y = encoder.fit_transform(df['Direction'])
X = df.iloc[:,1:df.shape[1]-2].values
print(X.shape, y.shape)

import statsmodels.api as sm

Xprime = sm.add_constant(X)
model = sm.GLM(y, Xprime, family = sm.families.Binomial()).fit()
print(model.summary())

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
logr = LogisticRegression()

logr.fit(X,y)
y_predict = logr.predict(X)

print('Classification Report : ')
print(classification_report(y, y_predict))
conf = confusion_matrix(y, y_predict, )
sns.heatmap(conf, cmap='YlGnBu', annot=True)
print(conf)

# Using 2005 as test

Xtrain = df[df.Year != 2005].iloc[:, 1:7].values
ytrain = df[df.Year != 2005].Direction
ytrain = encoder.fit_transform(ytrain)
Xtest = df[df.Year == 2005].iloc[:, 1:7].values
ytest = df[df.Year == 2005].Direction
ytest = encoder.fit_transform(ytest)
print(Xtrain.shape, ytrain.shape, Xtest.shape, ytest.shape)

logr.fit(Xtrain,ytrain)
ytest_predict = logr.predict(Xtest)
print('Classification Report : ')
print(classification_report(ytest, ytest_predict))
conf = confusion_matrix(ytest, ytest_predict, )
sns.heatmap(conf, cmap = 'YlGnBu', annot = True)

# Using Lag1 and Lag2 only

Xtrain_1 = Xtrain[:, 0:2]
Xtest_1 = Xtest[:, 0:2]
print(Xtrain.shape, Xtest.shape)

logr.fit(Xtrain_1, ytrain)
ytest_1_predict = logr.predict(Xtest_1)
print(classification_report(ytest, ytest_1_predict))
conf = confusion_matrix(ytest, ytest_1_predict)
sns.heatmap(conf, cmap = 'YlGnBu', annot=True)

# LDA

from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
lda = LinearDiscriminantAnalysis()

lda.fit( Xtrain_1, ytrain)
ytest_1_predict = lda.predict(Xtest_1)
print(classification_report(ytest, ytest_1_predict))
conf = confusion_matrix(ytest, ytest_1_predict)
sns.heatmap(conf, cmap='YlGnBu', annot = True)
probs = lda.predict_proba(Xtest_1)
print('Coefficients = ', lda.coef_)
print('Priors : ', lda.priors_)
print('Group Means : ', lda.means_)

# QDA

from sklearn.discriminant_analysis import QuadraticDiscriminantAnalysis
qda = QuadraticDiscriminantAnalysis()

qda.fit( Xtrain_1, ytrain)
ytest_1_predict = qda.predict(Xtest_1)
print(classification_report(ytest, ytest_1_predict))
conf = confusion_matrix(ytest, ytest_1_predict)
sns.heatmap(conf, cmap='YlGnBu', annot = True)
probs = qda.predict_proba(Xtest_1)
print('Priors : ', qda.priors_)
print('Group Means : ', qda.means_)

# KNN

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)

knn.fit(Xtrain_1, ytrain)
ytest_1_predict = knn.predict(Xtest_1)
print(classification_report(ytest, ytest_1_predict))
conf = confusion_matrix(ytest, ytest_1_predict)
sns.heatmap(conf, cmap = 'YlGnBu', annot=True)

"""## Caravan Dataset"""

df = pd.read_csv('https://raw.githubusercontent.com/mscaudill/IntroStatLearn/master/data/Caravan.csv')
df.head()

df.drop(columns = df.columns[0], inplace =True)

df.shape

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X = df.iloc[:, 0: 85]
Xnorm = scaler.fit_transform(X)
y = df.iloc[:, -1]
print(X.shape, y.shape)

from sklearn.model_selection import train_test_split
Xtrain, Xtest, ytrain, ytest = train_test_split(Xnorm,y, test_size=0.33)

for i in {1,3,5}:
  knn = KNeighborsClassifier(n_neighbors=i)
  knn.fit(Xtrain, ytrain)
  y_predict = knn.predict(Xtest)
  print(classification_report(ytest, y_predict))
  conf = confusion_matrix(ytest, y_predict)
  print(conf)
  print('____________________________________')
